Index: VoxelRender/BMPHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace VoxelRender;\r\n\r\npublic class BMPHandler\r\n{\r\n    private Bitmap Image;\r\n    private readonly int _stride;\r\n    public int Height;\r\n    public int Width;\r\n    private int BPP;\r\n    private byte[] _bmpBytes;\r\n    public (byte r, byte g, byte b)[,] matrix;\r\n    private byte[,] bytesM;\r\n\r\n    public BMPHandler(Bitmap image)\r\n    {\r\n        Image = image;\r\n        Height = image.Height;\r\n        Width = image.Width;\r\n        BPP = System.Drawing.Image.GetPixelFormatSize(image.PixelFormat) / 8;\r\n        _stride = (Width * BPP) + ((Width * BPP) % 4);\r\n        SetMatrix();\r\n    }\r\n    \r\n    public Bitmap GetBmp()\r\n    {\r\n        return Image;\r\n    }\r\n\r\n    public (byte r, byte g, byte b) this[int x, int y]\r\n    {\r\n        set { matrix[y, x] = value; }\r\n        get { return matrix[y, x]; }\r\n    }\r\n\r\n    private void SetMatrix()\r\n    {\r\n        var bytes = Image.GetBitmapBytes()\r\n            .Chunk(_stride)\r\n            .ToArray();\r\n\r\n        matrix = new (byte red, byte green, byte blue)[Height, Width];\r\n\r\n        for (int i = 0; i < Height; i++)\r\n        {\r\n            for (int j = 0; j < Width; j++)\r\n            {\r\n                matrix[i, j] = (bytes[i][j * BPP], bytes[i][j * BPP + 1], bytes[i][j * BPP + 2]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void UpdateBytes()\r\n    {\r\n        bytesM = new byte[Height, _stride];\r\n        for (int i = 0; i < Height; i++)\r\n        {\r\n            for (int j = 0; j < Width; j++)\r\n            {\r\n                bytesM[i, j * BPP] = matrix[i, j].r;\r\n                bytesM[i, j * BPP + 1] = matrix[i, j].g;\r\n                bytesM[i, j * BPP + 2] = matrix[i, j].b;\r\n            }\r\n        }\r\n\r\n        \r\n        \r\n        Image.SetBitmapBytes(bytesM.Cast<byte>().ToArray());\r\n    }\r\n\r\n    public void Clear()\r\n    {\r\n        matrix = new (byte red, byte green, byte blue)[Height, Width];\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/VoxelRender/BMPHandler.cs b/VoxelRender/BMPHandler.cs
--- a/VoxelRender/BMPHandler.cs	(revision 293e7337b125fd63a5ea5ee3960ec031e3f45b99)
+++ b/VoxelRender/BMPHandler.cs	(date 1662732593732)
@@ -2,73 +2,73 @@
 
 public class BMPHandler
 {
-    private Bitmap Image;
+    private readonly Bitmap _image;
     private readonly int _stride;
-    public int Height;
-    public int Width;
-    private int BPP;
+    public readonly int Height;
+    public readonly int Width;
+    private readonly int _bpp;
     private byte[] _bmpBytes;
-    public (byte r, byte g, byte b)[,] matrix;
-    private byte[,] bytesM;
+    public (byte r, byte g, byte b)[,] Matrix;
+    private byte[,] _bytesM;
 
     public BMPHandler(Bitmap image)
     {
-        Image = image;
+        _image = image;
         Height = image.Height;
         Width = image.Width;
-        BPP = System.Drawing.Image.GetPixelFormatSize(image.PixelFormat) / 8;
-        _stride = (Width * BPP) + ((Width * BPP) % 4);
+        _bpp = System.Drawing.Image.GetPixelFormatSize(image.PixelFormat) / 8;
+        _stride = (Width * _bpp) + ((Width * _bpp) % 4);
         SetMatrix();
     }
     
     public Bitmap GetBmp()
     {
-        return Image;
+        return _image;
     }
 
     public (byte r, byte g, byte b) this[int x, int y]
     {
-        set { matrix[y, x] = value; }
-        get { return matrix[y, x]; }
+        set { Matrix[y, x] = value; }
+        get { return Matrix[y, x]; }
     }
 
     private void SetMatrix()
     {
-        var bytes = Image.GetBitmapBytes()
+        var bytes = _image.GetBitmapBytes()
             .Chunk(_stride)
             .ToArray();
 
-        matrix = new (byte red, byte green, byte blue)[Height, Width];
+        Matrix = new (byte red, byte green, byte blue)[Height, Width];
 
         for (int i = 0; i < Height; i++)
         {
             for (int j = 0; j < Width; j++)
             {
-                matrix[i, j] = (bytes[i][j * BPP], bytes[i][j * BPP + 1], bytes[i][j * BPP + 2]);
+                Matrix[i, j] = (bytes[i][j * _bpp], bytes[i][j * _bpp + 1], bytes[i][j * _bpp + 2]);
             }
         }
     }
 
     public void UpdateBytes()
     {
-        bytesM = new byte[Height, _stride];
+        _bytesM = new byte[Height, _stride];
         for (int i = 0; i < Height; i++)
         {
             for (int j = 0; j < Width; j++)
             {
-                bytesM[i, j * BPP] = matrix[i, j].r;
-                bytesM[i, j * BPP + 1] = matrix[i, j].g;
-                bytesM[i, j * BPP + 2] = matrix[i, j].b;
+                _bytesM[i, j * _bpp] = Matrix[i, j].r;
+                _bytesM[i, j * _bpp + 1] = Matrix[i, j].g;
+                _bytesM[i, j * _bpp + 2] = Matrix[i, j].b;
             }
         }
 
         
         
-        Image.SetBitmapBytes(bytesM.Cast<byte>().ToArray());
+        _image.SetBitmapBytes(_bytesM.Cast<byte>().ToArray());
     }
 
     public void Clear()
     {
-        matrix = new (byte red, byte green, byte blue)[Height, Width];
+        Matrix = new (byte red, byte green, byte blue)[Height, Width];
     }
 }
\ No newline at end of file
